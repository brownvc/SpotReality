#pragma kernel CSMain

struct MeshProperties {
    float4 pos;
};

RWStructuredBuffer<MeshProperties> _Properties;
RWStructuredBuffer<float> _Depth;
float4x4 _GOPose;
float4 intrinsics;
float4 screenData;
float samplingSize;
float t;
float y_min;
float z_max;

float dx;
float dy;
float dz;

// We used to just be able to use (1, 1, 1) threads for whatever population (not sure the old limit), but a Unity update
// imposed a thread limit of 65535.  Now, to populations above that, we need to be more granular with our threads.
[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if (id.x < 480 * 640)
    {
        float4 pos = _Properties[id.x].pos;

        //float i = samplingSize * id.x;
        float i = id.x * samplingSize;

        float col_y = floor(i * screenData.z);    
        float col_x = i - floor(i * screenData.z) * screenData.x;
        //_Properties[id.x].color.z = 1

        uint depth_idx = (screenData.x * (screenData.y - col_y - 1)) + (screenData.x - col_x - 1);
    
        pos.z = _Depth[depth_idx]  * t + (1 - t);

        pos.x = (col_y - intrinsics.y) * pos.z / intrinsics.z;                 
        pos.y = (col_x - intrinsics.x) * pos.z / intrinsics.w;

        //pos.z = _Depth[depth_idx];
        pos.w = 1;
        //float4 pos = {.x,_Properties[id.x].pos.y,_Properties[id.x].pos.z,1.0};

        float4 final_pos = mul(_GOPose, pos);

        final_pos.x = final_pos.x + dx;
        final_pos.y = final_pos.y + dy;
        final_pos.z = final_pos.z + dz;

        //if (final_pos.y < y_min || final_pos.z < -0.0f || final_pos.z > z_max)
        //{
        //    final_pos.y = 0.0f;
        //    final_pos.z = 0.0f;
        //    final_pos.x = 0.0f;
        //    final_pos.w = 0.0f;
        //}
    
        // Apply translation to existing matrix, which will be read in the shader.
        _Properties[id.x].pos = final_pos;
        _Properties[id.x].pos.w = _Depth[depth_idx] * t + (1 - t);
        //_Properties[id.x].pos.w = abs(id.x * samplingSize - i);
    }
}