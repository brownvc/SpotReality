#pragma kernel CSMain

struct MeshProperties {
    float4 pos;
};

RWStructuredBuffer<MeshProperties> _Properties;
RWStructuredBuffer<float> _Depth;
float4x4 _GOPose;
float4 intrinsics;
float4 screenData;
float samplingSize;

// We used to just be able to use (1, 1, 1) threads for whatever population (not sure the old limit), but a Unity update
// imposed a thread limit of 65535.  Now, to populations above that, we need to be more granular with our threads.
[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    float4 pos = _Properties[id.x].pos;

    //float i = samplingSize * id.x;
    float i = id.x * samplingSize;

    float col_y = floor(i * screenData.z);    
    float col_x = i - floor(i * screenData.z) * screenData.x;
    //_Properties[id.x].color.z = 1

    uint depth_idx = (screenData.x * (screenData.y - col_y - 1)) + (screenData.x - col_x - 1);
    
    pos.z = _Depth[depth_idx];

    pos.x = (col_y - intrinsics.x) * pos.z / intrinsics.z;
    pos.y = (col_x - intrinsics.y) * pos.z / intrinsics.w;

    //pos.z = _Depth[depth_idx];
    pos.w = 1;
    if (pos.z <= 0.001){pos.z = 50000;}
    //float4 pos = {.x,_Properties[id.x].pos.y,_Properties[id.x].pos.z,1.0};
    
    // Apply translation to existing matrix, which will be read in the shader.
    _Properties[id.x].pos = mul(_GOPose, pos);
    _Properties[id.x].pos.w = _Depth[depth_idx];
    //_Properties[id.x].pos.w = abs(id.x * samplingSize - i);
}